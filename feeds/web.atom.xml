<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Mozillazg's Blog</title><link href="http://mozillazg.com/" rel="alternate"></link><link href="http://mozillazg.com/feeds/web.atom.xml" rel="self"></link><id>http://mozillazg.com/</id><updated>2015-06-24T00:00:00+00:00</updated><entry><title>JSON Web Token (JWT) 简介</title><link href="http://mozillazg.com/2015/06/hello-jwt.html" rel="alternate"></link><updated>2015-06-24T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2015-06-24:2015/06/hello-jwt.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://tools.ietf.org/html/rfc7519"&gt;JSON Web Token (JWT)&lt;/a&gt;
是一种基于 token 的认证方案。&lt;/p&gt;
&lt;div class="section" id="json-web-token"&gt;
&lt;h2&gt;JSON Web Token 的结构&lt;/h2&gt;
&lt;p&gt;一个 JWT token 看起来是这样的:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjEzODY4OTkxMzEsImlzcyI6ImppcmE6MTU0ODk1OTUiLCJxc2giOiI4MDYzZmY0Y2ExZTQxZGY3YmM5MGM4YWI2ZDBmNjIwN2Q0OTFjZjZkYWQ3YzY2ZWE3OTdiNDYxNGI3MTkyMmU5IiwiaWF0IjoxMzg2ODk4OTUxfQ.uKqU9dTB6gKwG6jQCuXYAiMNdfNRw98Hw_IWuA5MaMo
&lt;/pre&gt;
&lt;p&gt;可以简化为下面这样的结构:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
base64.encode(Header) + '.' + base64.encode(Payload) + '.' + base64.encode(Signature)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="header"&gt;
&lt;h2&gt;Header&lt;/h2&gt;
&lt;p&gt;Header 包含了一些元数据，至少会表明 token 类型以及 签名方法。比如&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{
      &amp;quot;typ&amp;quot; : &amp;quot;JWT&amp;quot;,
      &amp;quot;alg&amp;quot; : &amp;quot;HS256&amp;quot;
}
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;type&lt;/tt&gt;: 必需。token 类型，&lt;tt class="docutils literal"&gt;JWT&lt;/tt&gt; 表示是 JSON Web Token.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;alg&lt;/tt&gt;: 必需。token 所使用的签名算法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="payload-claims"&gt;
&lt;h2&gt;Payload (Claims)&lt;/h2&gt;
&lt;p&gt;Payload 部分包含了一些跟这个 token 有关的重要信息。
JWT 标准规定了一些字段，下面节选一些字段:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;iss&lt;/tt&gt;: The issuer of the token，token 是给谁的&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;sub&lt;/tt&gt;: The subject of the token，token 主题&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;exp&lt;/tt&gt;: Token expiration time defined in Unix time。 token 过期时间，Unix 时间戳格式&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;iat&lt;/tt&gt;: “Issued at” time, in Unix time。 token 创建时间， Unix 时间戳格式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了规定的字段外，可以包含其他任何 JSON 兼容的字段。&lt;/p&gt;
&lt;p&gt;Payload 示例:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{
    &amp;quot;iss&amp;quot;: &amp;quot;mozillazg.com&amp;quot;,
    &amp;quot;exp&amp;quot;: 1435055117,
    &amp;quot;user_id&amp;quot;: 1,
    &amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="signature"&gt;
&lt;h2&gt;Signature&lt;/h2&gt;
&lt;p&gt;JWT 标准遵照 SON Web Signature (JWS) 标准来生成签名。签名主要用于验证 token 是否有效，是否被篡改。 签名时可以选择任意的加密算法，比如 HMAC SHA-256:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
content = base64.encode(Header) + '.' + base64.encode(Payload)
signature = hmacsha256.hash(content)
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;说到这里有一点需要特别注意的是，默认情况下，JWT 中信息都是明文的，即 Payload 的内容并没有
被加密，可以通过 base64.decode(text) 的方式解码得到 Payload&lt;/strong&gt; 。
所以，不要在 Payload 里包含敏感信息，如果一定要包含敏感信息的话，记得先将 Payload 的内容进行加密（比如，使用 JSON Web Encryption (JWE) 标准进行加密）
然后在进行 base64.encode 操作。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python"&gt;
&lt;h2&gt;Python 实现&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;已有的轮子&lt;/strong&gt;: 上 PyPI 上 &lt;a class="reference external" href="https://pypi.python.org/pypi?%3Aaction=search&amp;amp;term=JWT&amp;amp;submit=search"&gt;搜索 JWT&lt;/a&gt; 即可。
用的比较多是 &lt;a class="reference external" href="https://pypi.python.org/pypi/PyJWT/"&gt;PyJWT&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;手动简单实现&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import base64
import json
import hashlib
import hmac

headers = json.dumps({
    &amp;quot;typ&amp;quot; : &amp;quot;JWT&amp;quot;,
    &amp;quot;alg&amp;quot; : &amp;quot;HS256&amp;quot;
})
payload = json.dumps({
    &amp;quot;iss&amp;quot;: &amp;quot;mozillazg.com&amp;quot;,
    &amp;quot;exp&amp;quot;: 1435055117,
    &amp;quot;user_id&amp;quot;: 1,
    &amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;
})
content = base64.b64encode(headers) + '.' + base64.b64encode(payload)
secret_key = 'your secret key'
signature = hmac.new(secret_key, content, hashlib.sha256).digest()

token = content + '.' + base64.b64encode(signature)
&lt;/pre&gt;
&lt;p&gt;最后得到的 token 的值是 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9.eyJpc3MiOiAibW96aWxsYXpnLmNvbSIsICJmb28iOiAiYmFyIiwgInVzZXJfaWQiOiAxLCAiZXhwIjogMTQzNTA1NTExN30=.A95dY1nUHTVC2Jlf3rEoij2x5w+hm00N0H1JQZpRdpI=&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;再次提示， &lt;strong&gt;payload 的值并没有被加密&lt;/strong&gt;，就算不知道 secert_key 的值也可以得到 payload 的值。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://jwt.io/"&gt;http://jwt.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://developer.atlassian.com/static/connect/docs/latest/concepts/understanding-jwt.html"&gt;https://developer.atlassian.com/static/connect/docs/latest/concepts/understanding-jwt.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.intridea.com/blog/2013/11/7/json-web-token-the-useful-little-standard-you-haven-t-heard-about"&gt;http://www.intridea.com/blog/2013/11/7/json-web-token-the-useful-little-standard-you-haven-t-heard-about&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://auth0.com/blog/2014/01/27/ten-things-you-should-know-about-tokens-and-cookies/"&gt;https://auth0.com/blog/2014/01/27/ten-things-you-should-know-about-tokens-and-cookies/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.toptal.com/web/cookie-free-authentication-with-json-web-tokens-an-example-in-laravel-and-angularjs"&gt;http://www.toptal.com/web/cookie-free-authentication-with-json-web-tokens-an-example-in-laravel-and-angularjs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://scotch.io/tutorials/the-anatomy-of-a-json-web-token"&gt;https://scotch.io/tutorials/the-anatomy-of-a-json-web-token&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/jpadilla/pyjwt/"&gt;https://github.com/jpadilla/pyjwt/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/JSON_Web_Token"&gt;https://en.wikipedia.org/wiki/JSON_Web_Token&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://tools.ietf.org/html/rfc7519"&gt;http://tools.ietf.org/html/rfc7519&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="jwt"></category></entry><entry><title>[JavaScript] 使用 flotr2 绘制包含子项的饼图</title><link href="http://mozillazg.com/2013/12/flotr2-pie-chart-with-broken-down-slices.html" rel="alternate"></link><updated>2013-12-05T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2013-12-05:2013/12/flotr2-pie-chart-with-broken-down-slices.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://www.humblesoftware.com/flotr2/"&gt;Flotr2&lt;/a&gt; 是一个用于绘制 HTML5 图形和图表的开源 JS 库&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于 flotr2 不支持环形饼图，所以对于包含子项的饼图只能通过其他办法来实现。&lt;/p&gt;
&lt;p&gt;我的实现方法是，首先显示最外层的饼图，再通过点击某一个项显示它包含的子项的饼图。
具体代码请见：&lt;/p&gt;
&lt;iframe width="100%" height="350" src="http://jsfiddle.net/M8rT7/embedded/" allowfullscreen="allowfullscreen" frameborder="0"&gt;&lt;/iframe&gt;

&lt;p&gt;当然，由于 flotr2 的局限性，这个图并不完美。如果想要更好的效果，
可以试试其他的 JS 图表插件实现的效果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.highcharts.com/demo/pie-donut"&gt;Highcharts - Donut chart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amcharts.com/javascript-charts/pie-chart-with-broken-down-slice/"&gt;Pie chart with broken down slices | amCharts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bl.ocks.org/kerryrodden/7090426"&gt;Sequences sunburst&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="javascript"></category><category term="flotr2"></category></entry><entry><title>[javascript]列出对象所有属性</title><link href="http://mozillazg.com/2013/05/javascript-list-object-all-properties.html" rel="alternate"></link><updated>2013-05-23T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2013-05-23:2013/05/javascript-list-object-all-properties.html</id><summary type="html">&lt;p&gt;当我们想知道某个对象拥有哪些的属性时，可以用下面的方法（现代浏览器）：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;properties&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个方法对于我们使用第三方 javascript 插件，而该插件的文档不是很详细时有很大的帮助&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nx"&gt;trackFormatter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;properties:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="console debug object properties image" src="/static/images/2013-05-23_01.png" /&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/208016/how-to-list-the-properties-of-a-javascript-object"&gt;json - How to list the properties of a javascript object - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="javascript"></category><category term="web"></category></entry></feed>